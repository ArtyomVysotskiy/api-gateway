// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: file_processing.proto

package file

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileProcessing_GetFiles_FullMethodName     = "/file_processing.FileProcessing/GetFiles"
	FileProcessing_UploadFile_FullMethodName   = "/file_processing.FileProcessing/UploadFile"
	FileProcessing_GetFileByID_FullMethodName  = "/file_processing.FileProcessing/GetFileByID"
	FileProcessing_SearchFile_FullMethodName   = "/file_processing.FileProcessing/SearchFile"
	FileProcessing_DownloadFile_FullMethodName = "/file_processing.FileProcessing/DownloadFile"
	FileProcessing_DeleteFile_FullMethodName   = "/file_processing.FileProcessing/DeleteFile"
)

// FileProcessingClient is the client API for FileProcessing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileProcessingClient interface {
	GetFiles(ctx context.Context, in *GetFilesRequest, opts ...grpc.CallOption) (*GetFilesResponse, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse], error)
	GetFileByID(ctx context.Context, in *GetFileByIDRequest, opts ...grpc.CallOption) (*GetFileByIDResponse, error)
	SearchFile(ctx context.Context, in *SearchFileRequest, opts ...grpc.CallOption) (*SearchFileResponse, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
}

type fileProcessingClient struct {
	cc grpc.ClientConnInterface
}

func NewFileProcessingClient(cc grpc.ClientConnInterface) FileProcessingClient {
	return &fileProcessingClient{cc}
}

func (c *fileProcessingClient) GetFiles(ctx context.Context, in *GetFilesRequest, opts ...grpc.CallOption) (*GetFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilesResponse)
	err := c.cc.Invoke(ctx, FileProcessing_GetFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileProcessing_ServiceDesc.Streams[0], FileProcessing_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadFileRequest, UploadFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileProcessing_UploadFileClient = grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse]

func (c *fileProcessingClient) GetFileByID(ctx context.Context, in *GetFileByIDRequest, opts ...grpc.CallOption) (*GetFileByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileByIDResponse)
	err := c.cc.Invoke(ctx, FileProcessing_GetFileByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) SearchFile(ctx context.Context, in *SearchFileRequest, opts ...grpc.CallOption) (*SearchFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchFileResponse)
	err := c.cc.Invoke(ctx, FileProcessing_SearchFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileProcessing_ServiceDesc.Streams[1], FileProcessing_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadFileRequest, DownloadFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileProcessing_DownloadFileClient = grpc.ServerStreamingClient[DownloadFileResponse]

func (c *fileProcessingClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, FileProcessing_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileProcessingServer is the server API for FileProcessing service.
// All implementations must embed UnimplementedFileProcessingServer
// for forward compatibility.
type FileProcessingServer interface {
	GetFiles(context.Context, *GetFilesRequest) (*GetFilesResponse, error)
	UploadFile(grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]) error
	GetFileByID(context.Context, *GetFileByIDRequest) (*GetFileByIDResponse, error)
	SearchFile(context.Context, *SearchFileRequest) (*SearchFileResponse, error)
	DownloadFile(*DownloadFileRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	mustEmbedUnimplementedFileProcessingServer()
}

// UnimplementedFileProcessingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileProcessingServer struct{}

func (UnimplementedFileProcessingServer) GetFiles(context.Context, *GetFilesRequest) (*GetFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiles not implemented")
}
func (UnimplementedFileProcessingServer) UploadFile(grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileProcessingServer) GetFileByID(context.Context, *GetFileByIDRequest) (*GetFileByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileByID not implemented")
}
func (UnimplementedFileProcessingServer) SearchFile(context.Context, *SearchFileRequest) (*SearchFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFile not implemented")
}
func (UnimplementedFileProcessingServer) DownloadFile(*DownloadFileRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileProcessingServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileProcessingServer) mustEmbedUnimplementedFileProcessingServer() {}
func (UnimplementedFileProcessingServer) testEmbeddedByValue()                        {}

// UnsafeFileProcessingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileProcessingServer will
// result in compilation errors.
type UnsafeFileProcessingServer interface {
	mustEmbedUnimplementedFileProcessingServer()
}

func RegisterFileProcessingServer(s grpc.ServiceRegistrar, srv FileProcessingServer) {
	// If the following call pancis, it indicates UnimplementedFileProcessingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileProcessing_ServiceDesc, srv)
}

func _FileProcessing_GetFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).GetFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileProcessing_GetFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).GetFiles(ctx, req.(*GetFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileProcessingServer).UploadFile(&grpc.GenericServerStream[UploadFileRequest, UploadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileProcessing_UploadFileServer = grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]

func _FileProcessing_GetFileByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).GetFileByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileProcessing_GetFileByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).GetFileByID(ctx, req.(*GetFileByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_SearchFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).SearchFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileProcessing_SearchFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).SearchFile(ctx, req.(*SearchFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileProcessingServer).DownloadFile(m, &grpc.GenericServerStream[DownloadFileRequest, DownloadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileProcessing_DownloadFileServer = grpc.ServerStreamingServer[DownloadFileResponse]

func _FileProcessing_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileProcessing_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileProcessing_ServiceDesc is the grpc.ServiceDesc for FileProcessing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileProcessing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file_processing.FileProcessing",
	HandlerType: (*FileProcessingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFiles",
			Handler:    _FileProcessing_GetFiles_Handler,
		},
		{
			MethodName: "GetFileByID",
			Handler:    _FileProcessing_GetFileByID_Handler,
		},
		{
			MethodName: "SearchFile",
			Handler:    _FileProcessing_SearchFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FileProcessing_DeleteFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FileProcessing_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _FileProcessing_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "file_processing.proto",
}
